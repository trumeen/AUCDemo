GLog.d(project.toString() + " -> root")
GLog.d(project.toString() + " -> app")
GLog.d(project.toString() + " -> lib")
apply {
    plugin "com.android.application"
    plugin "kotlin-android"
    plugin "kotlin-android-extensions"
    plugin "com.blankj.api"
}
android {
    compileSdkVersion Config.compileSdkVersion
    defaultConfig {
        minSdkVersion Config.minSdkVersion
        versionCode Config.versionCode
        versionName Config.versionName
        applicationId Config.applicationId + suffix
        targetSdkVersion Config.targetSdkVersion
        multiDexEnabled true
        resValue "string", "app_name", Config.appName + suffix
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/*'
    }
    dexOptions {
        preDexLibraries true
        javaMaxHeapSize "8g"
        maxProcessCount 8
        dexInProcess = true
    }
}
dependencies {
// LeakCanary
    debugImplementation Config.depConfig.leakcanary.android.dep
    debugImplementation Config.depConfig.leakcanary.support_fragment.dep
    releaseImplementation Config.depConfig.leakcanary.android_no_op.dep
    //根据Config.pkgConfig来依赖所有的pkg
    for (def entrySet : ConfigUtils.getApplyPkgs().entrySet()) {
        api entrySet.value.dep
    }
    if (Config.depConfig.feature.mock.isApply) {
        api Config.depConfig.feature.mock.dep
    }
}

def getSuffix() {
    if (project.path == ":feature:launcher:app") return ""
    return project.path.replace(":", "_").substring(":feature".length(),
            project.path.length() - ":app".length())
}